import React, { ReactElement, createElement, useMemo, useState, useEffect, useRef, useCallback } from "react";
import { RadarChartDataPoint, RadarChartConfig } from "../types/RadarChartTypes";
import { ANIMATION_CONFIG } from "../constants/chartConstants";
import {
    generateChartDescription,
    generateChartSummary,
    generateAriaLabel,
    getKeyboardInstructions
} from "../utils/accessibilityUtils";
import { useChartCalculations } from "../hooks/useChartCalculations";

// Import modular chart components
import { ChartGrid } from "./chart/ChartGrid";
import { ChartDataPoints } from "./chart/ChartDataPoints";
import { ChartLabels } from "./chart/ChartLabels";
import { ChartTooltip, TooltipState, calculateTooltipPosition } from "./chart/ChartTooltip";
import { ChartLegend } from "./chart/ChartLegend";

/**
 * Properties interface for the RadarChart component.
 *
 * This interface defines the required inputs for rendering a radar chart,
 * including processed data points, comprehensive configuration, and optional
 * interaction handling.
 *
 * @interface RadarChartProps
 */
export interface RadarChartProps {
    /**
     * Array of processed and validated radar chart data points.
     * Each point contains a category name and numeric value.
     * Data should already be validated by useRadarChartData hook.
     */
    data: RadarChartDataPoint[];

    /**
     * Complete configuration object containing all chart appearance,
     * behavior, and styling options. Generated by the parent widget.
     */
    config: RadarChartConfig;

    /**
     * Optional callback function executed when the chart is clicked.
     * When provided, enables keyboard navigation and adds interaction styling.
     */
    onClickAction?: () => void;
}

/**
 * Core radar chart rendering component for Mendix applications.
 *
 * This component handles the visual rendering of radar chart data using SVG graphics
 * and React components. It provides a highly modular, accessible, and performant
 * visualization that automatically adapts to different data sizes and configurations.
 *
 * **Architecture:**
 * - Modularized into focused sub-components for maintainability
 * - Uses React hooks for state management and performance optimization
 * - Implements comprehensive accessibility features (WCAG 2.1 compliant)
 * - Provides smooth animations and interactive tooltips
 *
 * **Key Features:**
 * - Dynamic polygon shapes (minimum 5 sides, adapts to data count)
 * - Smooth cubic bezier animations with configurable duration
 * - Interactive tooltips showing data point values on hover
 * - Comprehensive keyboard navigation support
 * - Screen reader support with detailed descriptions
 * - Configurable legend positioning (top, right, bottom, left)
 * - Responsive design that scales with container dimensions
 *
 * **Performance Optimizations:**
 * - Aggressive memoization of expensive calculations
 * - Efficient SVG rendering with minimal DOM updates
 * - Optimized event handlers using useCallback
 * - Separated chart calculations into dedicated hook
 *
 * **Accessibility Features:**
 * - ARIA labels and roles for screen reader support
 * - Keyboard navigation (Enter/Space for interaction)
 * - Live regions for dynamic content updates
 * - High contrast support and scalable text
 * - Detailed chart descriptions for non-visual users
 *
 * @param props - Chart configuration and data properties
 * @returns Fully rendered radar chart with interactive features
 *
 * @example
 * ```tsx
 * // Basic usage with data and configuration
 * <RadarChart
 *   data={[
 *     { name: "Performance", value: 4.2 },
 *     { name: "Quality", value: 3.8 },
 *     { name: "Innovation", value: 4.5 }
 *   ]}
 *   config={{
 *     width: 400,
 *     height: 400,
 *     maxValue: 5,
 *     fillColor: "#A084E7",
 *     strokeColor: "#7C5AC4",
 *     showLabels: true,
 *     showGridLines: true
 *   }}
 *   onClickAction={() => console.log("Chart clicked")}
 * />
 * ```
 *
 * @example
 * ```tsx
 * // Large dashboard chart with legend
 * <RadarChart
 *   data={performanceData}
 *   config={{
 *     ...chartConfig,
 *     width: 600,
 *     height: 600,
 *     showLegend: true,
 *     legendPosition: "bottom",
 *     title: "Team Performance Metrics"
 *   }}
 * />
 * ```
 */
export function RadarChart({ data, config, onClickAction }: RadarChartProps): ReactElement {
    const {
        width,
        height,
        maxValue,
        fillColor,
        strokeColor,
        fillOpacity,
        textColor,
        gridColor,
        showLabels,
        showGridLines,
        showLegend,
        legendPosition
    } = config;

    // Animation state - controls the reveal animation progress (0 to 1)
    const [animationProgress, setAnimationProgress] = useState(0);

    // Tooltip state - manages hover tooltip visibility and content
    const [tooltip, setTooltip] = useState<TooltipState>({
        visible: false,
        x: 0,
        y: 0,
        value: 0,
        name: ""
    });

    // DOM reference for coordinate calculations during tooltip positioning
    const chartContainerRef = useRef<HTMLDivElement>(null);

    /**
     * Comprehensive chart calculations using optimized hook.
     * Handles all mathematical operations including:
     * - Polygon coordinate generation
     * - Grid line positioning
     * - Data point transformations
     * - Path generation for smooth curves
     * - Spoke positioning for radial grid
     */
    const { dimensions, gridPolygons, dataPoints, radarPath, spokes, normalizedData } = useChartCalculations(
        width,
        height,
        data,
        maxValue,
        animationProgress
    );

    /**
     * Chart entrance animation effect using cubic ease-out timing.
     * Creates a smooth reveal animation when data changes or component mounts.
     * Uses requestAnimationFrame for optimal performance and smooth 60fps animation.
     */
    useEffect(() => {
        const startTime = Date.now();
        const duration = ANIMATION_CONFIG.DURATION;

        const animate = (): void => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / duration, 1);
            const easeOutCubic = 1 - Math.pow(1 - progress, ANIMATION_CONFIG.EASING_FACTOR);

            setAnimationProgress(easeOutCubic);

            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };

        requestAnimationFrame(animate);
    }, [data]);

    /**
     * Handles mouse enter events on data points to show tooltips.
     * Calculates optimal tooltip positioning within container boundaries
     * to prevent overflow and ensure tooltip visibility.
     *
     * @param dataPoint - The data point being hovered
     * @param event - Mouse event containing cursor position
     */
    const handleDataPointMouseEnter = useCallback((dataPoint: RadarChartDataPoint, event: React.MouseEvent) => {
        if (!chartContainerRef.current) {
            return;
        }

        // Calculate mouse position relative to chart container
        const containerRect = chartContainerRef.current.getBoundingClientRect();
        const mouseX = event.clientX - containerRect.left;
        const mouseY = event.clientY - containerRect.top;

        // Calculate optimal tooltip position with boundary detection
        const { x: tooltipX, y: tooltipY } = calculateTooltipPosition(mouseX, mouseY, containerRect);

        setTooltip({
            visible: true,
            x: tooltipX,
            y: tooltipY,
            value: dataPoint.value,
            name: dataPoint.name
        });
    }, []);

    /**
     * Handles mouse leave events to hide tooltips.
     * Uses functional update to preserve other tooltip state properties.
     */
    const handleDataPointMouseLeave = useCallback(() => {
        setTooltip(prev => ({ ...prev, visible: false }));
    }, []);

    /**
     * Generates comprehensive accessibility content for screen readers.
     * Creates detailed descriptions, summaries, and interaction instructions
     * to ensure the chart is fully accessible to users with visual impairments.
     */
    const accessibilityContent = useMemo(() => {
        const chartDescription = generateChartDescription(data, maxValue, config.title);
        const chartSummary = generateChartSummary(data);
        const ariaLabel = generateAriaLabel(data, config.title, !!onClickAction);
        const keyboardInstructions = getKeyboardInstructions(!!onClickAction);

        return { chartDescription, chartSummary, ariaLabel, keyboardInstructions };
    }, [data, maxValue, config.title, onClickAction]);

    /**
     * Memoized container styles for optimal layout and positioning.
     * Adapts flex direction based on legend position and adds appropriate
     * cursor styling for interactive charts.
     */
    const containerStyle: React.CSSProperties = useMemo(
        () => ({
            display: "flex",
            flexDirection: legendPosition === "top" || legendPosition === "bottom" ? "column" : "row",
            alignItems: legendPosition === "top" || legendPosition === "bottom" ? "center" : "flex-start",
            gap: "12px",
            cursor: onClickAction ? "pointer" : "default",
            position: "relative"
        }),
        [legendPosition, onClickAction]
    );

    /**
     * Memoized chart container styles ensuring proper dimensions and positioning
     * for accurate coordinate calculations and tooltip positioning.
     */
    const chartContainerStyle: React.CSSProperties = useMemo(
        () => ({
            width,
            height,
            position: "relative"
        }),
        [width, height]
    );

    /**
     * Keyboard event handler for accessibility compliance.
     * Enables chart interaction via Enter and Space keys when click action is available.
     * Prevents default browser behavior to avoid unwanted scrolling.
     */
    const handleKeyDown = useCallback(
        (e: React.KeyboardEvent) => {
            if (onClickAction && (e.key === "Enter" || e.key === " ")) {
                e.preventDefault();
                onClickAction();
            }
        },
        [onClickAction]
    );

    return (
        <div
            style={containerStyle}
            onClick={onClickAction}
            className="radar-chart"
            role={onClickAction ? "button" : "img"}
            aria-label={accessibilityContent.ariaLabel}
            tabIndex={onClickAction ? 0 : undefined}
            onKeyDown={onClickAction ? handleKeyDown : undefined}
        >
            {/* Optimized single legend render - positioned via CSS */}
            {showLegend && (legendPosition === "top" || legendPosition === "left") && (
                <ChartLegend
                    data={data}
                    strokeColor={strokeColor}
                    textColor={textColor}
                    legendPosition={legendPosition}
                    showLegend={showLegend}
                />
            )}

            <div ref={chartContainerRef} style={chartContainerStyle}>
                {/* Chart title */}
                {config.title && (
                    <div
                        style={{
                            textAlign: "center",
                            fontSize: "16px",
                            fontWeight: "600",
                            color: textColor,
                            marginBottom: "10px",
                            height: "20px"
                        }}
                        className="radar-chart__title"
                    >
                        {config.title}
                    </div>
                )}

                {/* Main SVG chart */}
                <svg
                    width={width}
                    height={height}
                    style={{ overflow: "visible" }}
                    className="radar-chart__svg"
                    viewBox={`0 0 ${width} ${height}`}
                    preserveAspectRatio="xMidYMid meet"
                    role="presentation"
                    aria-hidden="true"
                >
                    {/* Grid and spokes */}
                    <ChartGrid
                        gridPolygons={gridPolygons}
                        spokes={spokes}
                        gridColor={gridColor}
                        showGridLines={showGridLines}
                    />

                    {/* Radar area with animation */}
                    {dataPoints.length > 0 && (
                        <path
                            d={radarPath}
                            fill={fillColor}
                            fillOpacity={fillOpacity}
                            stroke={strokeColor}
                            strokeWidth="2"
                            strokeLinejoin="round"
                            className="radar-chart__area"
                            style={{
                                transition: "all 0.3s ease-in-out",
                                filter: "drop-shadow(0 2px 8px rgba(0, 0, 0, 0.1))"
                            }}
                            opacity={animationProgress}
                        />
                    )}

                    {/* Data points */}
                    <ChartDataPoints
                        dataPoints={dataPoints}
                        normalizedData={normalizedData}
                        strokeColor={strokeColor}
                        animationProgress={animationProgress}
                        onDataPointMouseEnter={handleDataPointMouseEnter}
                        onDataPointMouseLeave={handleDataPointMouseLeave}
                    />

                    {/* Category labels */}
                    <ChartLabels
                        normalizedData={normalizedData}
                        dimensions={dimensions}
                        textColor={textColor}
                        showLabels={showLabels}
                    />
                </svg>

                {/* Tooltip */}
                <ChartTooltip tooltip={tooltip} />

                {/* Screen reader content */}
                <div className="sr-only" aria-live="polite">
                    <p>{accessibilityContent.chartDescription}</p>
                    <p>{accessibilityContent.chartSummary}</p>
                    {onClickAction && <p>{accessibilityContent.keyboardInstructions}</p>}
                </div>
            </div>

            {/* Optimized single legend render - positioned via CSS */}
            {showLegend && (legendPosition === "right" || legendPosition === "bottom") && (
                <ChartLegend
                    data={data}
                    strokeColor={strokeColor}
                    textColor={textColor}
                    legendPosition={legendPosition}
                    showLegend={showLegend}
                />
            )}
        </div>
    );
}
